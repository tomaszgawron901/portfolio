@inject IJSRuntime JsRuntime

<div class="page" style="display: flex; flex-direction: column;" @ref="self">
    <div class="pageHeader">
        @Label.ToUpper()
    </div>
    @ChildContent
</div>

@code {
    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter]
    public TabControl Parent { get; set; }

    public ElementReference self;


    public virtual void Activate() { }

    public virtual void Deactivate() { }


    public async void CenterIt()
    {
        await JsRuntime.InvokeVoidAsync("centerElement", self);
    }

    public async void ScrollTo()
    {
        await JsRuntime.InvokeVoidAsync("scrollToElement", self);
    }

    public async Task<bool> IsInView()
    {
        return await JsRuntime.InvokeAsync<bool>("isInView", self);
    }

    public async Task<bool> IsInCenter()
    {
        return await JsRuntime.InvokeAsync<bool>("isInCenter", self);
    }

    protected override void OnInitialized()
    {
        if (Parent is null)
        {
            throw new ArgumentNullException("Page must exist within a TabControl");
        }
        Parent.AddPage(this);
        base.OnInitialized();
    }
}
