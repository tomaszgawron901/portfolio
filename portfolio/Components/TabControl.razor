@using System.Threading

<div @onscroll="Scrolled" class="main" @ref="self">
    <CascadingValue Value="this">
        <TopNavigation @ref="navigation">
            @foreach (Page page in Pages)
            {
                <div class="nav-item @(ActivePage == page ? "active" : "")" @onclick="() => { navigation.CloseNavMenu(); page.ScrollTo(); }">
                    <div class="@(page.Icon)" aria-hidden="true"></div> @(page.Label)
                </div>
            }
        </TopNavigation>
        @ChildContent
    </CascadingValue>
</div>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected List<Page> Pages = new List<Page>();
    public Page ActivePage { get; set; }

    private TopNavigation navigation;
    private ElementReference self;

    private async Task Scrolled()
    {
        if(!await ActivePage.IsInView())
        {
            foreach (Page page in Pages)
            {
                if (await page.IsInView())
                {
                    ActivePage = page;
                }
            }
        }
        if(lastScrollTask is null)
        {
            lastScrollTask = Task.Run(this.LastScrollInterval);
        }
        lastScroll = DateTime.Now;
    }

    public DateTime lastScroll { get; private set; } = DateTime.Now;
    public Task lastScrollTask = null;

    private async void LastScrollInterval()
    {
        double timeSinceLastScroll = 0;
        while (timeSinceLastScroll < 1000)
        {
            int delay = (int)(1000 - timeSinceLastScroll);
            await Task.Delay(delay);
            timeSinceLastScroll = (DateTime.Now - this.lastScroll).TotalMilliseconds;
        }
        this.ActivePage.CenterIt();
        this.lastScrollTask = null;
    }


    internal void AddPage(Page page)
    {
        Pages.Add(page);
        if (Pages.Count == 1)
        {
            ActivePage = page;
        }
        StateHasChanged();
    }

    public void ScrollTo(int index)
    {
        Pages[index].ScrollTo();
    }

}
