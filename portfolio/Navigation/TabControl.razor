@inject IJSRuntime JsRuntime

<div class="main" @ref="self">
    <CascadingValue Value="this">
        <TopNavigation @ref="navigation">
            @foreach (Page page in Pages)
            {
                <div class="nav-item @(ActivePage == page ? "active" : "")" @onclick="() => { navigation.CloseNavMenu(); page.ScrollTo(); }">
                    <div class="@(page.Icon)" aria-hidden="true"></div> @(page.Label)
                </div>
            }
        </TopNavigation>
        @ChildContent
    </CascadingValue>
</div>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected List<Page> Pages = new List<Page>();
    public Page ActivePage { get; set; }

    private TopNavigation navigation;
    private ElementReference self;


    internal void AddPage(Page page)
    {
        Pages.Add(page);
        if (Pages.Count == 1)
        {
            ActivePage = page;
        }
        StateHasChanged();
    }

    [JSInvokable]
    public void SetActivePage(int index)
    {
        if(index >= 0 && index < Pages.Count)
        {
            ActivePage = Pages[index];
        }
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeJS();
        }
    }

    private async Task InitializeJS()
    {
        await JsRuntime.InvokeVoidAsync("initializeTabControl", self, DotNetObjectReference.Create(this));
        for (int i = 0; i < Pages.Count; i++)
        {
            await JsRuntime.InvokeVoidAsync("addPage", self, i, Pages[i].self);
        }
    }

}
